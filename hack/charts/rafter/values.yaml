# Default values for rafter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride:
fullnameOverride:

image:
  repository: eu.gcr.io/kyma-project/rafter
  tag: v1.0.0
  pullPolicy: IfNotPresent

installCRDs: true

deployment:
  labels: {}
  annotations: {}
  replicas: 1
  extraProperties: {}

pod:
  labels: {}
  annotations: {}
    # sidecar.istio.io/inject: "false"
    # recreate: "{{ .Release.Time.Seconds }}"
  resources:
    limits:
      cpu: 150m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 32Mi
  volumes: {}
    # - name: tmp-empty-dir
    #   emptyDir: {}
  volumeMounts: {}
    # - mountPath: /tmp
    #   name: tmp-empty-dir
  extraProperties:
    terminationGracePeriodSeconds: 10
    # hostAliases:
    #   - ip: {{ .Values.global.minikubeIP }}
    #     hostnames:
    #       - "minio.{{ .Values.global.ingress.domainName }}"
  extraContainerProperties: {}

serviceAccount:
  create: true
  name:
  labels: {}
  annotations: {}

rbac:
  clusterScope:
    create: true
    role:
      name:
      labels: {}
      annotations: {}
      extraRules: []
    roleBinding:
      name:
      labels: {}
      annotations: {}
  namespaced:
    create: true
    role:
      name:
      labels: {}
      annotations: {}
      extraRules: []
    roleBinding:
      name:
      labels: {}
      annotations: {}

webhooksConfigMap:
  create: true
  name:
  hooks:
    markdown: |-
      {
        "metadataExtractors":[
          {
            "name": "rafter-frontmatter-service",
            "namespace": "kyma-system",
            "endpoint": "/v1/extract",
            "filter": "\\.md$"
          }
        ]
      }
    asyncapi: |-
      {
        "validations":[
          {
            "name": "rafter-asyncapi-service",
            "namespace": "kyma-system",
            "endpoint": "/v1/validate"
          }
        ],
        "mutations":[
          {
            "name": "rafter-asyncapi-service",
            "namespace": "kyma-system",
            "endpoint": "/v1/convert"
          }
        ]
      }
  labels: {}
  annotations: {}

metrics:
  enabled: true
  service:
    name:
    type: ClusterIP
    port:
      name: metrics
      external: 8080
      internal: metrics
      protocol: TCP
    labels: {}
    annotations: {}
  serviceMonitor:
    create: false
    name:
    scrapeInterval: 30s
    labels: {}
    annotations: {}
  pod:
    labels: {}
    annotations: {}
      # prometheus.io/scrape: "true"
      # prometheus.io/port: "8080"
      # prometheus.io/path: "/metrics"

envs:
  clusterAssetGroup:
    relistInterval: 
      value: 5m
  assetGroup:
    relistInterval: 
      value: 5m
  clusterBucket:
    relistInterval: 
      value: 30s
    maxConcurrentReconciles: 
      value: "1"
    region: 
      value: us-east-1
  bucket:
    relistInterval: 
      value: 30s
    maxConcurrentReconciles: 
      value: "1"
    region: 
      value: us-east-1
  clusterAsset:
    relistInterval: 
      value: 30s
    maxConcurrentReconciles: 
      value: "1"
  asset:
    relistInterval: 
      value: 30s
    maxConcurrentReconciles: 
      value: "1"
  store:
    endpoint: 
      valueFrom:
        configMapKeyRef:
          name: assetstore-minio-docs-upload
          key: APP_UPLOAD_ENDPOINT_WITH_PORT
    externalEndpoint: 
      value: dupa
      # value: '{{ if .Values.global.minioExternalEndpoint }}{{ .Values.global.minioExternalEndpoint }}{{ else }}https://minio{{ end }}'
    accessKey:
      valueFrom:
        secretKeyRef:
          name: assetstore-minio
          key: accesskey
    secretKey:
      valueFrom:
        secretKeyRef:
          name: assetstore-minio
          key: secretkey
    useSSL: 
      valueFrom:
        configMapKeyRef:
          name: assetstore-minio-docs-upload
          key: APP_UPLOAD_SECURE
    uploadWorkers: 
      value: "10"
  loader:
    verifySSL: 
      value: true
    tempDir: 
      value: /tmp
  webhooks:
    validation:
      timeout: 
        value: 1m
      workers: 
        value: "10"
    mutation:
      timeout: 
        value: 1m
      workers: 
        value: "10"
    metadata:
      timeout: 
        value: 1m
