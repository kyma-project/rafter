image:
  repository: eu.gcr.io/kyma-project/rafter
  tag: v1.0.0
  pullPolicy: IfNotPresent

installCRDs: true

deployment:
  labels: {}
  annotations: {}
  replicas: 1
  extraProperties: {}

pod:
  labels: {}
  annotations: {}
    # sidecar.istio.io/inject: "false"
    # recreate: {{ .Release.Time.Seconds | quote }}
  resources: {}
    # limits:
    #   cpu: 150m
    #   memory: 128Mi
    # requests:
    #   cpu: 10m
    #   memory: 32Mi
  volumes: []
    # - name: tmp-empty-dir
    #   emptyDir: {}
  volumeMounts: []
    # - mountPath: /tmp
    #   name: tmp-empty-dir
  extraProperties: {}
    # terminationGracePeriodSeconds: 10
    # hostAliases:
    #   - ip: {{ .Values.global.minikubeIP }}
    #     hostnames:
    #       - "minio.{{ .Values.global.ingress.domainName }}"
  extraContainerProperties: {}
  extraEnvs: {}

serviceAccount:
  create: true
  name:
  labels: {}
  annotations: {}

rbac:
  clusterScope:
    create: true
    role:
      name:
      labels: {}
      annotations: {}
      extraRules: []
    roleBinding:
      name:
      labels: {}
      annotations: {}
  namespaced:
    create: true
    role:
      name:
      labels: {}
      annotations: {}
      extraRules: []
    roleBinding:
      name:
      labels: {}
      annotations: {}

webhooksConfigMap:
  create: false
  name:
  hooks: {}
    # markdown: |-
    #   {
    #     "metadataExtractors":[
    #       {
    #         "name": "assetstore-asset-metadata-service",
    #         "namespace": "kyma-system",
    #         "endpoint": "/v1/extract",
    #         "filter": "\\.md$"
    #       }
    #     ]
    #   }
    # asyncapi: |-
    #   {
    #     "validations":[
    #       {
    #         "name": "cms-cms-asyncapi-service",
    #         "namespace": "kyma-system",
    #         "endpoint": "/v1/validate"
    #       }
    #     ],
    #     "mutations":[
    #       {
    #         "name": "cms-cms-asyncapi-service",
    #         "namespace": "kyma-system",
    #         "endpoint": "/v1/convert"
    #       }
    #     ]
    #   }
  labels: {}
  annotations: {}

metrics:
  enabled: true
  service:
    name:
    type: ClusterIP
    port:
      name: metrics
      internal: 8080
      targetPort: metrics
      protocol: TCP
    labels: {}
    annotations: {}
  serviceMonitor:
    create: false
    name:
    scrapeInterval: 30s
    labels: {}
    annotations: {}
  pod:
    labels: {}
    annotations: {}
      # prometheus.io/scrape: "true"
      # prometheus.io/port: "8080"
      # prometheus.io/path: "/metrics"

envs:
  clusterDocsTopic:
    relistInterval: 5m
  docsTopic:
    relistInterval: 5m
  clusterAssetGroup:
    relistInterval: 5m
  assetGroup:
    relistInterval: 5m
  clusterBucket:
    relistInterval: 30s
    maxConcurrentReconciles: 1
    region: us-east-1
  bucket:
    relistInterval: 30s
    maxConcurrentReconciles: 1
    region: us-east-1
  clusterAsset:
    relistInterval: 30s
    maxConcurrentReconciles: 1
  asset:
    relistInterval: 30s
    maxConcurrentReconciles: 1
  store:
    endpoint: "minio.kyma.local"
    externalEndpoint: "https://minio.kyma.loca"
    accessKey:
    secretKey:
    useSSL: true
    uploadWorkers: 10
  loader:
    verifySSL: true
    tempDir: /tmp
  webhooks:
    validation:
      timeout: 1m
      workers: 10
    mutation:
      timeout: 1m
      workers: 10
    metadata:
      timeout: 1m
